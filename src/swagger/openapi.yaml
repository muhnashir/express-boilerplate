openapi: 3.0.0
info:
  title: Express Boilerplate API
  description: API documentation for Express Boilerplate application
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000/api/v1
    description: Local development server
  - url: https://api.example.com/api/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: ERROR
        code:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Validation failed
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: "\"email\" must be a valid email"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin]
          example: user
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"
    
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: Password123!
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin]
          example: user
    
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: Password123!
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin]
          example: user
    
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: Password123!
    
    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            refreshToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        timestamp:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"
    
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Fix login issue
        description:
          type: string
          example: Users are unable to login using social media accounts
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          example: open
        priority:
          type: string
          enum: [low, medium, high]
          example: high
        assigneeId:
          type: integer
          format: int64
          example: 2
        createdBy:
          type: integer
          format: int64
          example: 1
        dueDate:
          type: string
          format: date
          example: "2025-10-15"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"
    
    TicketCreate:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          example: Fix login issue
        description:
          type: string
          example: Users are unable to login using social media accounts
        priority:
          type: string
          enum: [low, medium, high]
          example: high
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          example: open
        assigneeId:
          type: integer
          format: int64
          example: 2
        dueDate:
          type: string
          format: date
          example: "2025-10-15"
    
    TicketUpdate:
      type: object
      properties:
        title:
          type: string
          example: Fix login issue
        description:
          type: string
          example: Users are unable to login using social media accounts
        priority:
          type: string
          enum: [low, medium, high]
          example: high
        status:
          type: string
          enum: [open, in_progress, resolved, closed]
          example: in_progress
        assigneeId:
          type: integer
          format: int64
          example: 2
        dueDate:
          type: string
          format: date
          example: "2025-10-15"
    
    TicketAssign:
      type: object
      required:
        - assigneeId
      properties:
        assigneeId:
          type: integer
          format: int64
          example: 2
    
    PaginatedResponse:
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
        message:
          type: string
          example: Data retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            totalItems:
              type: integer
              example: 25
            totalPages:
              type: integer
              example: 3
        timestamp:
          type: string
          format: date-time
          example: "2025-10-01T14:38:00.000Z"

paths:
  /health:
    get:
      summary: Basic health check endpoint
      description: Returns the basic health status of the API
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Health check successful
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: ok
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-10-01T14:38:00.000Z"
                      uptime:
                        type: number
                        example: 3600.45
                      environment:
                        type: string
                        example: development
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
  
  /health/detailed:
    get:
      summary: Detailed health check endpoint
      description: Returns detailed health status of the API including system information and service dependencies
      tags:
        - System
      responses:
        '200':
          description: Detailed health information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Detailed health check successful
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [ok, warning, critical]
                        example: ok
                      timestamp:
                        type: string
                        format: date-time
                        example: "2025-10-01T14:38:00.000Z"
                      uptime:
                        type: number
                        example: 3600.45
                      environment:
                        type: string
                        example: development
                      system:
                        type: object
                        properties:
                          memory:
                            type: object
                            properties:
                              total:
                                type: string
                                example: 16.32 GB
                              free:
                                type: string
                                example: 8.16 GB
                              usage:
                                type: string
                                example: 50%
                          cpu:
                            type: object
                            properties:
                              cores:
                                type: integer
                                example: 8
                              model:
                                type: string
                                example: Intel(R) Core(TM) i7-10700K CPU @ 3.80GHz
                              load:
                                type: array
                                items:
                                  type: number
                                example: [1.2, 1.5, 1.7]
                          platform:
                            type: object
                            properties:
                              type:
                                type: string
                                example: Linux
                              release:
                                type: string
                                example: 5.15.0-58-generic
                              architecture:
                                type: string
                                example: x64
                      services:
                        type: object
                        properties:
                          database:
                            type: object
                            properties:
                              status:
                                type: string
                                enum: [ok, error]
                                example: ok
                              responseTime:
                                type: string
                                example: 5ms
                              connection:
                                type: string
                                enum: [active, inactive]
                                example: active
                          redis:
                            type: object
                            properties:
                              status:
                                type: string
                                enum: [ok, error, unknown]
                                example: ok
                              responseTime:
                                type: string
                                example: 2ms
                              connection:
                                type: string
                                enum: [active, inactive]
                                example: active
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users:
    get:
      summary: Get all users
      description: Returns a list of users with pagination
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sortBy
          schema:
            type: string
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new user
      description: Creates a new user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: User created successfully
                  data:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}:
    get:
      summary: Get user by ID
      description: Returns a user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user
      description: Updates a user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    $ref: '#/components/schemas/User'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete user
      description: Deletes a user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: User deleted successfully
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tickets:
    get:
      summary: Get all tickets
      description: Returns a list of tickets with pagination and filtering
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: sortBy
          schema:
            type: string
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
        - in: query
          name: status
          schema:
            type: string
            enum: [open, in_progress, resolved, closed]
          description: Filter by status
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high]
          description: Filter by priority
        - in: query
          name: assigneeId
          schema:
            type: integer
          description: Filter by assignee ID
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new ticket
      description: Creates a new ticket
      tags:
        - Tickets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreate'
      responses:
        '201':
          description: Ticket created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Ticket created successfully
                  data:
                    $ref: '#/components/schemas/Ticket'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tickets/{id}:
    get:
      summary: Get ticket by ID
      description: Returns a ticket by ID
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Ticket ID
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Ticket retrieved successfully
                  data:
                    $ref: '#/components/schemas/Ticket'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update ticket
      description: Updates a ticket by ID
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Ticket ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdate'
      responses:
        '200':
          description: Ticket updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Ticket updated successfully
                  data:
                    $ref: '#/components/schemas/Ticket'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete ticket
      description: Deletes a ticket by ID
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Ticket ID
      responses:
        '200':
          description: Ticket deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Ticket deleted successfully
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tickets/{id}/assign:
    post:
      summary: Assign ticket
      description: Assigns a ticket to a user
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Ticket ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketAssign'
      responses:
        '200':
          description: Ticket assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: Ticket assigned successfully
                  data:
                    $ref: '#/components/schemas/Ticket'
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-01T14:38:00.000Z"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'