version: '3.8'

services:
  # Application service
  app:
    build:
      context: ../../
      dockerfile: deployment/dockerfiles/Dockerfile
    container_name: express-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=express_boilerplate
      - DB_USER=root
      - DB_PASSWORD=rootpassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../../src:/app/src
      - ../../config:/app/config
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    command: npm run dev

  # MySQL service
  mysql:
    image: mysql:8.0
    container_name: express-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=express_boilerplate
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service
  redis:
    image: redis:alpine
    container_name: express-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer for database management (optional)
  adminer:
    image: adminer
    container_name: express-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - app-network

volumes:
  mysql-data:
  redis-data:

networks:
  app-network:
    driver: bridge